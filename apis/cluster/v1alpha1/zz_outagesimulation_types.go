/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OutageFiltersInitParameters struct {
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`
}

type OutageFiltersObservation struct {
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OutageFiltersParameters struct {

	// +kubebuilder:validation:Optional
	CloudProvider *string `json:"cloudProvider" tf:"cloud_provider,omitempty"`

	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName" tf:"region_name,omitempty"`
}

type OutageSimulationInitParameters struct {
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	OutageFilters []OutageFiltersInitParameters `json:"outageFilters,omitempty" tf:"outage_filters,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

type OutageSimulationObservation struct {
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OutageFilters []OutageFiltersObservation `json:"outageFilters,omitempty" tf:"outage_filters,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	SimulationID *string `json:"simulationId,omitempty" tf:"simulation_id,omitempty"`

	StartRequestDate *string `json:"startRequestDate,omitempty" tf:"start_request_date,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type OutageSimulationParameters struct {

	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	OutageFilters []OutageFiltersParameters `json:"outageFilters,omitempty" tf:"outage_filters,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// OutageSimulationSpec defines the desired state of OutageSimulation
type OutageSimulationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OutageSimulationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OutageSimulationInitParameters `json:"initProvider,omitempty"`
}

// OutageSimulationStatus defines the observed state of OutageSimulation.
type OutageSimulationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OutageSimulationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OutageSimulation is the Schema for the OutageSimulations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type OutageSimulation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterName) || (has(self.initProvider) && has(self.initProvider.clusterName))",message="spec.forProvider.clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.outageFilters) || (has(self.initProvider) && has(self.initProvider.outageFilters))",message="spec.forProvider.outageFilters is a required parameter"
	Spec   OutageSimulationSpec   `json:"spec"`
	Status OutageSimulationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OutageSimulationList contains a list of OutageSimulations
type OutageSimulationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OutageSimulation `json:"items"`
}

// Repository type metadata.
var (
	OutageSimulation_Kind             = "OutageSimulation"
	OutageSimulation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OutageSimulation_Kind}.String()
	OutageSimulation_KindAPIVersion   = OutageSimulation_Kind + "." + CRDGroupVersion.String()
	OutageSimulation_GroupVersionKind = CRDGroupVersion.WithKind(OutageSimulation_Kind)
)

func init() {
	SchemeBuilder.Register(&OutageSimulation{}, &OutageSimulationList{})
}
