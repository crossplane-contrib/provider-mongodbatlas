/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IngestionSchedulesInitParameters struct {
}

type IngestionSchedulesObservation struct {
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type IngestionSchedulesParameters struct {
}

type LakePipelineInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	Sink []SinkInitParameters `json:"sink,omitempty" tf:"sink,omitempty"`

	Source []SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`

	Transformations []TransformationsInitParameters `json:"transformations,omitempty" tf:"transformations,omitempty"`
}

type LakePipelineObservation struct {
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IngestionSchedules []IngestionSchedulesObservation `json:"ingestionSchedules,omitempty" tf:"ingestion_schedules,omitempty"`

	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Sink []SinkObservation `json:"sink,omitempty" tf:"sink,omitempty"`

	Snapshots []SnapshotsObservation `json:"snapshots,omitempty" tf:"snapshots,omitempty"`

	Source []SourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Transformations []TransformationsObservation `json:"transformations,omitempty" tf:"transformations,omitempty"`
}

type LakePipelineParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Sink []SinkParameters `json:"sink,omitempty" tf:"sink,omitempty"`

	// +kubebuilder:validation:Optional
	Source []SourceParameters `json:"source,omitempty" tf:"source,omitempty"`

	// +kubebuilder:validation:Optional
	Transformations []TransformationsParameters `json:"transformations,omitempty" tf:"transformations,omitempty"`
}

type PartitionFieldsInitParameters struct {
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type PartitionFieldsObservation struct {
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type PartitionFieldsParameters struct {

	// +kubebuilder:validation:Optional
	FieldName *string `json:"fieldName" tf:"field_name,omitempty"`

	// +kubebuilder:validation:Optional
	Order *float64 `json:"order" tf:"order,omitempty"`
}

type SinkInitParameters struct {
	PartitionFields []PartitionFieldsInitParameters `json:"partitionFields,omitempty" tf:"partition_fields,omitempty"`

	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SinkObservation struct {
	PartitionFields []PartitionFieldsObservation `json:"partitionFields,omitempty" tf:"partition_fields,omitempty"`

	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SinkParameters struct {

	// +kubebuilder:validation:Optional
	PartitionFields []PartitionFieldsParameters `json:"partitionFields,omitempty" tf:"partition_fields,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SnapshotsInitParameters struct {
}

type SnapshotsObservation struct {
	CopyRegion *string `json:"copyRegion,omitempty" tf:"copy_region,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	FrequencyYype *string `json:"frequencyYype,omitempty" tf:"frequency_yype,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterKey *string `json:"masterKey,omitempty" tf:"master_key,omitempty"`

	MongodVersion *string `json:"mongodVersion,omitempty" tf:"mongod_version,omitempty"`

	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	ReplicaSetName *string `json:"replicaSetName,omitempty" tf:"replica_set_name,omitempty"`

	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SnapshotsParameters struct {
}

type SourceInitParameters struct {
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	PolicyItemID *string `json:"policyItemId,omitempty" tf:"policy_item_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceObservation struct {
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	PolicyItemID *string `json:"policyItemId,omitempty" tf:"policy_item_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceParameters struct {

	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemID *string `json:"policyItemId,omitempty" tf:"policy_item_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TransformationsInitParameters struct {
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TransformationsObservation struct {
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TransformationsParameters struct {

	// +kubebuilder:validation:Optional
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// LakePipelineSpec defines the desired state of LakePipeline
type LakePipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LakePipelineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LakePipelineInitParameters `json:"initProvider,omitempty"`
}

// LakePipelineStatus defines the observed state of LakePipeline.
type LakePipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LakePipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LakePipeline is the Schema for the LakePipelines API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type LakePipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   LakePipelineSpec   `json:"spec"`
	Status LakePipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LakePipelineList contains a list of LakePipelines
type LakePipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LakePipeline `json:"items"`
}

// Repository type metadata.
var (
	LakePipeline_Kind             = "LakePipeline"
	LakePipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LakePipeline_Kind}.String()
	LakePipeline_KindAPIVersion   = LakePipeline_Kind + "." + CRDGroupVersion.String()
	LakePipeline_GroupVersionKind = CRDGroupVersion.WithKind(LakePipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&LakePipeline{}, &LakePipelineList{})
}
