/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsEventbridgeInitParameters struct {
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type AwsEventbridgeObservation struct {
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type AwsEventbridgeParameters struct {

	// +kubebuilder:validation:Optional
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type EventProcessorsInitParameters struct {
	AwsEventbridge []AwsEventbridgeInitParameters `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type EventProcessorsObservation struct {
	AwsEventbridge []AwsEventbridgeObservation `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type EventProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	AwsEventbridge []AwsEventbridgeParameters `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type TriggerInitParameters struct {
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	EventProcessors []EventProcessorsInitParameters `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Unordered *bool `json:"unordered,omitempty" tf:"unordered,omitempty"`
}

type TriggerObservation struct {
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	ConfigScheduleType *string `json:"configScheduleType,omitempty" tf:"config_schedule_type,omitempty"`

	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	EventProcessors []EventProcessorsObservation `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Unordered *bool `json:"unordered,omitempty" tf:"unordered,omitempty"`
}

type TriggerParameters struct {

	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Optional
	EventProcessors []EventProcessorsParameters `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Unordered *bool `json:"unordered,omitempty" tf:"unordered,omitempty"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TriggerInitParameters `json:"initProvider,omitempty"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Trigger is the Schema for the Triggers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appId) || (has(self.initProvider) && has(self.initProvider.appId))",message="spec.forProvider.appId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TriggerSpec   `json:"spec"`
	Status TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	Trigger_Kind             = "Trigger"
	Trigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Trigger_Kind}.String()
	Trigger_KindAPIVersion   = Trigger_Kind + "." + CRDGroupVersion.String()
	Trigger_GroupVersionKind = CRDGroupVersion.WithKind(Trigger_Kind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
