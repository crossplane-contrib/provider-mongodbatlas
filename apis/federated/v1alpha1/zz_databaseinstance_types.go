/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsInitParameters struct {
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	TestS3Bucket *string `json:"testS3Bucket,omitempty" tf:"test_s3_bucket,omitempty"`
}

type AwsObservation struct {
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	IAMAssumedRoleArn *string `json:"iamAssumedRoleArn,omitempty" tf:"iam_assumed_role_arn,omitempty"`

	IAMUserArn *string `json:"iamUserArn,omitempty" tf:"iam_user_arn,omitempty"`

	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	TestS3Bucket *string `json:"testS3Bucket,omitempty" tf:"test_s3_bucket,omitempty"`
}

type AwsParameters struct {

	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId" tf:"role_id,omitempty"`

	// +kubebuilder:validation:Optional
	TestS3Bucket *string `json:"testS3Bucket" tf:"test_s3_bucket,omitempty"`
}

type CloudProviderConfigInitParameters struct {
	Aws []AwsInitParameters `json:"aws,omitempty" tf:"aws,omitempty"`
}

type CloudProviderConfigObservation struct {
	Aws []AwsObservation `json:"aws,omitempty" tf:"aws,omitempty"`
}

type CloudProviderConfigParameters struct {

	// +kubebuilder:validation:Optional
	Aws []AwsParameters `json:"aws" tf:"aws,omitempty"`
}

type CollectionsInitParameters struct {
	DataSources []DataSourcesInitParameters `json:"dataSources,omitempty" tf:"data_sources,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CollectionsObservation struct {
	DataSources []DataSourcesObservation `json:"dataSources,omitempty" tf:"data_sources,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CollectionsParameters struct {

	// +kubebuilder:validation:Optional
	DataSources []DataSourcesParameters `json:"dataSources,omitempty" tf:"data_sources,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DataProcessRegionInitParameters struct {
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DataProcessRegionObservation struct {
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DataProcessRegionParameters struct {

	// +kubebuilder:validation:Optional
	CloudProvider *string `json:"cloudProvider" tf:"cloud_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type DataSourcesInitParameters struct {
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	Collection *string `json:"collection,omitempty" tf:"collection,omitempty"`

	CollectionRegex *string `json:"collectionRegex,omitempty" tf:"collection_regex,omitempty"`

	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	DatabaseRegex *string `json:"databaseRegex,omitempty" tf:"database_regex,omitempty"`

	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	ProvenanceFieldName *string `json:"provenanceFieldName,omitempty" tf:"provenance_field_name,omitempty"`

	StoreName *string `json:"storeName,omitempty" tf:"store_name,omitempty"`

	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type DataSourcesObservation struct {
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	Collection *string `json:"collection,omitempty" tf:"collection,omitempty"`

	CollectionRegex *string `json:"collectionRegex,omitempty" tf:"collection_regex,omitempty"`

	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	DatabaseRegex *string `json:"databaseRegex,omitempty" tf:"database_regex,omitempty"`

	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	ProvenanceFieldName *string `json:"provenanceFieldName,omitempty" tf:"provenance_field_name,omitempty"`

	StoreName *string `json:"storeName,omitempty" tf:"store_name,omitempty"`

	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type DataSourcesParameters struct {

	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// +kubebuilder:validation:Optional
	Collection *string `json:"collection,omitempty" tf:"collection,omitempty"`

	// +kubebuilder:validation:Optional
	CollectionRegex *string `json:"collectionRegex,omitempty" tf:"collection_regex,omitempty"`

	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseRegex *string `json:"databaseRegex,omitempty" tf:"database_regex,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	ProvenanceFieldName *string `json:"provenanceFieldName,omitempty" tf:"provenance_field_name,omitempty"`

	// +kubebuilder:validation:Optional
	StoreName *string `json:"storeName,omitempty" tf:"store_name,omitempty"`

	// +kubebuilder:validation:Optional
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type DatabaseInstanceInitParameters struct {
	CloudProviderConfig []CloudProviderConfigInitParameters `json:"cloudProviderConfig,omitempty" tf:"cloud_provider_config,omitempty"`

	DataProcessRegion []DataProcessRegionInitParameters `json:"dataProcessRegion,omitempty" tf:"data_process_region,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	StorageDatabases []StorageDatabasesInitParameters `json:"storageDatabases,omitempty" tf:"storage_databases,omitempty"`

	StorageStores []StorageStoresInitParameters `json:"storageStores,omitempty" tf:"storage_stores,omitempty"`
}

type DatabaseInstanceObservation struct {
	CloudProviderConfig []CloudProviderConfigObservation `json:"cloudProviderConfig,omitempty" tf:"cloud_provider_config,omitempty"`

	DataProcessRegion []DataProcessRegionObservation `json:"dataProcessRegion,omitempty" tf:"data_process_region,omitempty"`

	Hostnames []*string `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	StorageDatabases []StorageDatabasesObservation `json:"storageDatabases,omitempty" tf:"storage_databases,omitempty"`

	StorageStores []StorageStoresObservation `json:"storageStores,omitempty" tf:"storage_stores,omitempty"`
}

type DatabaseInstanceParameters struct {

	// +kubebuilder:validation:Optional
	CloudProviderConfig []CloudProviderConfigParameters `json:"cloudProviderConfig,omitempty" tf:"cloud_provider_config,omitempty"`

	// +kubebuilder:validation:Optional
	DataProcessRegion []DataProcessRegionParameters `json:"dataProcessRegion,omitempty" tf:"data_process_region,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageDatabases []StorageDatabasesParameters `json:"storageDatabases,omitempty" tf:"storage_databases,omitempty"`

	// +kubebuilder:validation:Optional
	StorageStores []StorageStoresParameters `json:"storageStores,omitempty" tf:"storage_stores,omitempty"`
}

type ReadPreferenceInitParameters struct {
	MaxStalenessSeconds *float64 `json:"maxStalenessSeconds,omitempty" tf:"max_staleness_seconds,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ReadPreferenceObservation struct {
	MaxStalenessSeconds *float64 `json:"maxStalenessSeconds,omitempty" tf:"max_staleness_seconds,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReadPreferenceParameters struct {

	// +kubebuilder:validation:Optional
	MaxStalenessSeconds *float64 `json:"maxStalenessSeconds,omitempty" tf:"max_staleness_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type StorageDatabasesInitParameters struct {
	Collections []CollectionsInitParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Views []ViewsInitParameters `json:"views,omitempty" tf:"views,omitempty"`
}

type StorageDatabasesObservation struct {
	Collections []CollectionsObservation `json:"collections,omitempty" tf:"collections,omitempty"`

	MaxWildcardCollections *float64 `json:"maxWildcardCollections,omitempty" tf:"max_wildcard_collections,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Views []ViewsObservation `json:"views,omitempty" tf:"views,omitempty"`
}

type StorageDatabasesParameters struct {

	// +kubebuilder:validation:Optional
	Collections []CollectionsParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Views []ViewsParameters `json:"views,omitempty" tf:"views,omitempty"`
}

type StorageStoresInitParameters struct {
	AdditionalStorageClasses []*string `json:"additionalStorageClasses,omitempty" tf:"additional_storage_classes,omitempty"`

	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format,omitempty"`

	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	Public *string `json:"public,omitempty" tf:"public,omitempty"`

	ReadPreference []ReadPreferenceInitParameters `json:"readPreference,omitempty" tf:"read_preference,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type StorageStoresObservation struct {
	AdditionalStorageClasses []*string `json:"additionalStorageClasses,omitempty" tf:"additional_storage_classes,omitempty"`

	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format,omitempty"`

	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	Public *string `json:"public,omitempty" tf:"public,omitempty"`

	ReadPreference []ReadPreferenceObservation `json:"readPreference,omitempty" tf:"read_preference,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type StorageStoresParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalStorageClasses []*string `json:"additionalStorageClasses,omitempty" tf:"additional_storage_classes,omitempty"`

	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format,omitempty"`

	// +kubebuilder:validation:Optional
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	Public *string `json:"public,omitempty" tf:"public,omitempty"`

	// +kubebuilder:validation:Optional
	ReadPreference []ReadPreferenceParameters `json:"readPreference,omitempty" tf:"read_preference,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type TagsInitParameters struct {
}

type TagsObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {
}

type ViewsInitParameters struct {
}

type ViewsObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Pipeline *string `json:"pipeline,omitempty" tf:"pipeline,omitempty"`

	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type ViewsParameters struct {
}

// DatabaseInstanceSpec defines the desired state of DatabaseInstance
type DatabaseInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DatabaseInstanceInitParameters `json:"initProvider,omitempty"`
}

// DatabaseInstanceStatus defines the observed state of DatabaseInstance.
type DatabaseInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DatabaseInstance is the Schema for the DatabaseInstances API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type DatabaseInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   DatabaseInstanceSpec   `json:"spec"`
	Status DatabaseInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseInstanceList contains a list of DatabaseInstances
type DatabaseInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseInstance `json:"items"`
}

// Repository type metadata.
var (
	DatabaseInstance_Kind             = "DatabaseInstance"
	DatabaseInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseInstance_Kind}.String()
	DatabaseInstance_KindAPIVersion   = DatabaseInstance_Kind + "." + CRDGroupVersion.String()
	DatabaseInstance_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseInstance{}, &DatabaseInstanceList{})
}
