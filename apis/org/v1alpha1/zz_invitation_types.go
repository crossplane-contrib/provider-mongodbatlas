/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InvitationInitParameters struct {
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// +listType=set
	TeamsIds []*string `json:"teamsIds,omitempty" tf:"teams_ids,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InvitationObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InvitationID *string `json:"invitationId,omitempty" tf:"invitation_id,omitempty"`

	InviterUsername *string `json:"inviterUsername,omitempty" tf:"inviter_username,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// +listType=set
	TeamsIds []*string `json:"teamsIds,omitempty" tf:"teams_ids,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InvitationParameters struct {

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	TeamsIds []*string `json:"teamsIds,omitempty" tf:"teams_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// InvitationSpec defines the desired state of Invitation
type InvitationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InvitationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InvitationInitParameters `json:"initProvider,omitempty"`
}

// InvitationStatus defines the observed state of Invitation.
type InvitationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InvitationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Invitation is the Schema for the Invitations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type Invitation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgId) || (has(self.initProvider) && has(self.initProvider.orgId))",message="spec.forProvider.orgId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roles) || (has(self.initProvider) && has(self.initProvider.roles))",message="spec.forProvider.roles is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   InvitationSpec   `json:"spec"`
	Status InvitationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InvitationList contains a list of Invitations
type InvitationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Invitation `json:"items"`
}

// Repository type metadata.
var (
	Invitation_Kind             = "Invitation"
	Invitation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Invitation_Kind}.String()
	Invitation_KindAPIVersion   = Invitation_Kind + "." + CRDGroupVersion.String()
	Invitation_GroupVersionKind = CRDGroupVersion.WithKind(Invitation_Kind)
)

func init() {
	SchemeBuilder.Register(&Invitation{}, &InvitationList{})
}
