/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticationDatabaseUserInitParameters struct {
	CustomerX509CasSecretRef *v1.SecretKeySelector `json:"customerX509CasSecretRef,omitempty" tf:"-"`

	MonthsUntilExpiration *float64 `json:"monthsUntilExpiration,omitempty" tf:"months_until_expiration,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AuthenticationDatabaseUserObservation struct {
	Certificates []CertificatesObservation `json:"certificates,omitempty" tf:"certificates,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MonthsUntilExpiration *float64 `json:"monthsUntilExpiration,omitempty" tf:"months_until_expiration,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AuthenticationDatabaseUserParameters struct {

	// +kubebuilder:validation:Optional
	CustomerX509CasSecretRef *v1.SecretKeySelector `json:"customerX509CasSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MonthsUntilExpiration *float64 `json:"monthsUntilExpiration,omitempty" tf:"months_until_expiration,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-mongodbatlas/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-mongodbatlas/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in mongodbatlas to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CertificatesInitParameters struct {
}

type CertificatesObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type CertificatesParameters struct {
}

// AuthenticationDatabaseUserSpec defines the desired state of AuthenticationDatabaseUser
type AuthenticationDatabaseUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthenticationDatabaseUserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthenticationDatabaseUserInitParameters `json:"initProvider,omitempty"`
}

// AuthenticationDatabaseUserStatus defines the observed state of AuthenticationDatabaseUser.
type AuthenticationDatabaseUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthenticationDatabaseUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AuthenticationDatabaseUser is the Schema for the AuthenticationDatabaseUsers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type AuthenticationDatabaseUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthenticationDatabaseUserSpec   `json:"spec"`
	Status            AuthenticationDatabaseUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthenticationDatabaseUserList contains a list of AuthenticationDatabaseUsers
type AuthenticationDatabaseUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthenticationDatabaseUser `json:"items"`
}

// Repository type metadata.
var (
	AuthenticationDatabaseUser_Kind             = "AuthenticationDatabaseUser"
	AuthenticationDatabaseUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthenticationDatabaseUser_Kind}.String()
	AuthenticationDatabaseUser_KindAPIVersion   = AuthenticationDatabaseUser_Kind + "." + CRDGroupVersion.String()
	AuthenticationDatabaseUser_GroupVersionKind = CRDGroupVersion.WithKind(AuthenticationDatabaseUser_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthenticationDatabaseUser{}, &AuthenticationDatabaseUserList{})
}
